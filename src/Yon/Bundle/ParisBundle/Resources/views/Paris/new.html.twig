{% extends '::baseAdmin.html.twig' %}
{% form_theme form ':Form:fields.html.twig' %}
{% block title %}{{ parent() }} Ajout Paris {% endblock %}
{% set menuParis = true %}
{% set menuParisCreate = true %}
{% block stylesheets %}
    {{ parent() }}
        <style>
            .inputfile {
                /* visibility: hidden etc. wont work */
                width: 0.1px;
                height: 0.1px;
                opacity: 0;
                overflow: hidden;
                position: absolute;
                z-index: -1;
            }
            .inputfile:focus + label {
                /* keyboard navigation */
                outline: 1px dotted #000;
                outline: -webkit-focus-ring-color auto 5px;
            }
            .inputfile + label * {
              pointer-events: none;
            }
            .inputfile-text {
                left: 15px;
                position: relative;
                top: 6px;
            }
            #api_challenge_choice_hashtag_1 {
                margin-left: 10px;
            }
            .toggleHashtag{
                display: none;
            }
        </style>
{% endblock %}
{% block body %}
    {% for flashMessage in app.session.flashbag.get('success') %}
        <div class="callout callout-success">
            {{ flashMessage }}
        </div>
    {% endfor %}
    {% for flashMessage in app.session.flashbag.get('error') %}
        <div class="callout callout-danger">
            {{ flashMessage }}
        </div>
    {% endfor %}
    <div class="row">
        <div class="col-md-12">
            <div class="box box-primary">

                <form action="" {{ form_enctype(form) }} method="POST" class="form-edit-new form-horizontal" role="form">

                    <div class="box-header">
                        <h3 class="box-title">Ajout Paris</h3>
                    </div>
                    {{ form_start(form) }}
                        <div class="box-body">
                            <div class="form-group">
                                <label for="name" class="col-sm-2 control-label required">Auteur</label>
                                <div class="col-sm-5">
                                    <input readonly="readonly" type="text" class="form-control"  name="to_belong_to_user" id="utilisateurs_to_belong_to_user">
                                </div>
                                <div class="col-sm-5">
                                    <input type="text" class="form-control"  id="to_belong_to_user" value="" placeholder="Rechercher l'utilisateur ici">
                                </div>
                            </div>
{#                            {{ form_widget(form) }}#}
                            {#{{ form_row(form.title) }}#}
                            <div class="form-group">
                                <label class="col-sm-2 control-label required" for="api_challenge_title">Intitul√©</label>
                                <div class="col-sm-9">
                                    <input id="api_challenge_title" name="api_challenge[title]" required="required" maxlength="100" class="form-control ui-autocomplete-input" value="" autocomplete="off" type="text" onKeyDown="textCounter(this,'titleCountDown',100);" onKeyUp="textCounter(this,'titleCountDown',100)">                                   
                                </div>
                                <div class="col-sm-1">
                                    <input style="color:red;font-size:12pt;font-style:italic;" class="form-control" readonly="readonly" type="text" id='titleCountDown' name="titleCountDown" size="3" maxlength="3" value="100" /> 
                                </div>                               
                            </div>
                            {{ form_row(form.duration) }}
                            {{ form_row(form.startDate) }}
                            {{ form_row(form.endDate) }}
                            {{ form_row(form.choice_hashtag) }}
                            <div id="trends-container" class="toggleHashtag">
                                {{ form_row(form.trendingTopics) }}
                            </div>
                            <div id="manual-container" class="toggleHashtag">
                                {{ form_row(form.hashtag_user) }}
                            </div>
                            {{ form_row(form.contest) }}
                            {{ form_row(form.color) }}
                            {{ form_row(form.result) }}
                            {{ form_row(form.betPrice) }}
                            {{ form_row(form.prize) }}                            
                            {{ form_row(form.status) }}
                            {{ form_row(form.alertMessage) }}
                            
                            <div class="form-group">
                                <label for="name" class="col-sm-2 control-label required">Coupons</label>
                                
                                <div class="col-sm-10" style="border: 2px solid #d2d6de;left: 18px;width: 81.2%;">
                                    
                                    <div class="col-sm-8">
                                        <ul id="list-coupon">
                                            {#<li>aa</li>#}
                                        </ul>
                                    </div>
                                    <br/>
                                    {#<span class="btn btn-default" id="add_coupon">+</span>#}
                                    <input id="add_coupon" type="checkbox" style="width:20px;" value="1" name="checkbox"/> &nbsp; Activer coupon
                                    
                                    <div id="container-coupon-form" style="display:none;">
                                        <hr/>
                                        <div class="form-edit-new form-horizontal" id = "form_coupon">
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="type" class="col-sm-2 control-label ">Type</label>
                                                    <div class="col-sm-8">
                                                        <select name="f_coupon[type]" placeholder="type" class="form-control" id="type_coupon">
                                                            <option value= "">----- Choisir type coupon -----</option>
                                                            {% for keyCoupon,valCoupon in typeCoupon %}
                                                                <option value="{{ keyCoupon }}">{{ valCoupon }}</option>
                                                            {% endfor %}
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="amount" class="col-sm-2 control-label ">Montant</label>
                                                    <div class="col-sm-8">
                                                        <input type="number" class="form-control"  name="f_coupon[amount]" id="amount_coupon" placeholder="amount" >
                                                    </div>
                                                   
                                                </div>
                                            </div>
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="message" class="col-sm-2 control-label ">Message</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control"  name="f_coupon[message]" id="message_coupon" placeholder="message" >
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="short_title" class="col-sm-2 control-label ">Description courte</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control"  name="f_coupon[short_title]" id="short_title_coupon" placeholder="Description courte" >
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="title" class="col-sm-2 control-label">Titre</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control"  name="f_coupon[title]" id="titre_coupon" placeholder="Titre coupon" >
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!--div class="col-sm-8">
                                                <div class="form-group">
                                                    <label for="name" class="col-sm-2 control-label required">Name</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control"  name="f_coupon[name]" id="name_coupon" placeholder="nom">
                                                    </div>
                                                </div>
                                            </div-->
                                           
                                            
                                            
                                            <!--div class="col-sm-8">
                                                <div class="form-group">
                                                    <div class="col-sm-2 ">
                                                        <span class="btn btn-primary" id="add_cloned_value" onclick="getItemValue('XXXX')">Ajouter</span>
                                                    </div>
                                                </div>
                                            </div-->
                                        </div>
                                        
                                    </div>
                                    
                                    <div id="list-coupon-form-cloned">
                                        
                                    </div>
                                    
                                </div>
                                
                            </div>
                            
                        </div>
                                                      
                        <div class="box-footer">
                            <input type="submit" class="btn btn-primary" value="Cr√©er" />
                            {{ form_end(form) }}
                            <a href="{{ path('apichallenge_index') }}" class="btn btn-default pull-left" >Retour √† la liste</a>
                        </div>
                    
                </form>
            </div>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
	<script type="text/javascript">
            var defaultMaxHour = {{ defaultMaxHour }};
            /*function getItemValue(countName){
                var inputValues = [];
                $('#item-coupon-form-'+countName+' select').each(function() {
                    inputValues.push($(this).val());
                })
                $('#item-coupon-form-'+countName+' input').each(function() {
                    inputValues.push($(this).val());
                })
                
                $("#list-coupon").append('<li>'+inputValues+'</li>');
                $("#add_coupon").show();
                $('#item-coupon-form-'+countName).hide();
            }*/
            function textCounter(field, cnt, maxlimit) {         
                var cntfield = document.getElementById(cnt) 
                if (field.value.length > maxlimit) 
                    field.value = field.value.substring(0, maxlimit);
                else
                    cntfield.value = maxlimit - field.value.length;
            }
            $(function () {
                
                
                //var $checkCoupon = $("#add_coupon");
                $('#add_coupon').click(function(){
                    if($('#add_coupon').prop('checked')) {
                        $("#container-coupon-form").show();
                        $("#form_coupon select").prop('required',true);
                        $("#form_coupon input").prop('required',true);
                    } else {
                        $("#container-coupon-form").hide();
                         $("#form_coupon select").prop('required',false);
                        $("#form_coupon input").prop('required',false);
                    }
                })
                
                /************* Liste coupon   **************/
                /*$("#add_coupon").click(function(e){
                    var $couponForm     =  $('#container-coupon-form');
                    var $couponFormLast =  $('#list-coupon-form-cloned > div:last');
                    
                    if($couponFormLast.length > 0){
                        var iSourceLength = parseInt( $couponFormLast.prop("id").match(/\d+/g), 10 ) +1;
                    } else {
                        var iSourceLength = 1;
                    }
                    
                    var $clonForm       = $couponForm.clone().prop('id','item-coupon-form-'+iSourceLength);
                    $klonreplaced = $clonForm.html().replace(/XXXX/g, iSourceLength);
                    $clonForm.html($klonreplaced);
                    $("#list-coupon-form-cloned").append($clonForm.show());
                    $("#add_coupon").hide();
                    //$("#list-coupon-form-cloned").append("<div class='col-sm-8'><div class='form-group'><div class='col-sm-2'><span class='btn btn-primary' id='add_cloned_value'>Ajouter</span></div></div></div>");
                
                })*/
                
                //Date picker
               {# $('#api_challenge_startDate').datepicker({
                  autoclose: true,
                  format:'dd-mm-yyyy'
                });#}
                        
                var contestEndDate = null;
                
                /* https://eonasdan.github.io/bootstrap-datetimepicker/ */
                $('#api_challenge_startDate').datetimepicker({
                    format: 'DD/MM/YYYY HH:mm',
                    //minDate: moment()
                });
                $('#api_challenge_endDate').datetimepicker({
                    format: 'DD/MM/YYYY HH:mm',
                    //minDate: moment()
                });
                
                $('input[name="api_challenge[choice_hashtag]"]').change(function() {
                    $('.toggleHashtag').hide();
                    if (this.value == 'trends') {
                        $('#trends-container').show();
                    }
                    else if (this.value == 'manuel') {
                        $('#manual-container').show();
                    }
                });
                $('#api_challenge_contest').change(function() {
                    var contestId = $(this).val();
                    var contestVal = $("#api_challenge_contest option[value='"+contestId+"']").text();
                    
                    if(parseInt(contestId) > 0){
                        $('#manual-container').show();
                        $('#api_challenge_choice_hashtag_1').attr('checked', true);
                        $.ajax({
                            type: "GET",
                            url: '{{ path('apicontest_contest_info_ajax')}}',
                            cache: false,
                            data: {id: contestId},
                            success: function(response){
                                if(response.name){
                                    $('#api_challenge_startDate').datetimepicker({
                                        format: 'DD/MM/YYYY HH:mm'
                                    });
                                    $('#api_challenge_endDate').datetimepicker({
                                        format: 'DD/MM/YYYY HH:mm'
                                    });
                                    
                                    $( "#utilisateurs_to_belong_to_user" ).val(response.userProfileId) ;
                                    $( "#to_belong_to_user" ).val("").attr('readonly','readonly');
                                    
                                    contestEndDate = moment.utc(response.endDate, 'DD/MM/YYYY HH:mm');
                                    var contestStartDate = moment.utc(response.startDate, 'DD/MM/YYYY HH:mm');
                                    var contestendDateProvisoir6 = moment.utc(response.endDateProvisoir6, 'DD/MM/YYYY HH:mm');
                                   
                                    $( "#api_challenge_startDate" ).val(response.startDate) ;
                                    $( "#api_challenge_endDate" ).val(response.endDateProvisoir) ;
                                    
                                    
                                    {#contestStartDate = moment.utc(response.startDate, 'DD/MM/YYYY HH:mm');#}
                                                                       
                                    //$('#api_challenge_startDate').data("DateTimePicker").minDate(contestStartDate);
                                    //$('#api_challenge_startDate').data("DateTimePicker").maxDate(contestEndDate);
                                    
                                    
                                    if(contestendDateProvisoir6.diff(contestEndDate) < 0 ){
                                       // $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestendDateProvisoir6);
                                    } else {
                                        //$('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                                    }
                                    
                                    //$('#api_challenge_endDate').data("DateTimePicker").minDate(contestStartDate);
                                    //$('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                                                                      
                                    
                                    var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                                    var end = moment.utc($('#api_challenge_endDate').val(), 'DD/MM/YYYY HH:mm');
                                    zdiff = moment.utc(end.diff(start)).format('HH:mm');
                                    $('#api_challenge_duration').val(zdiff);
                                    
                                }
                                
                            }
                        });
                        $('#api_challenge_hashtag_user').val(contestVal.replace(/\s/g,"").replace("-","_")).attr('readonly','readonly');
                    } else {
                        $('#api_challenge_hashtag_user').val("").removeAttr('readonly');
                        $( "#to_belong_to_user" ).val("").removeAttr('readonly');
                        $( "#utilisateurs_to_belong_to_user" ).val("");
                        contestEndDate = null;
                    }
                });
                function log( message ) {
                    $( "#utilisateurs_to_belong_to_user" ).val(message.item.id) ;
                }
                
                function presetParisList( oParis ) {
                    $( "#api_challenge_title" ).val(oParis.item.title) ;
                    $( "#utilisateurs_to_belong_to_user" ).val(oParis.item.user) ;
                    $( "#api_challenge_startDate" ).val(oParis.item.startDate) ;
                    $( "#api_challenge_endDate" ).val(oParis.item.endDate) ;
                    $( "#api_challenge_hashtag" ).val(oParis.item.hashtag) ;
                    $( "#api_challenge_contest" ).val(oParis.item.concours) ;
                    $( "#api_challenge_color" ).val(oParis.item.color) ;
                    $( "#api_challenge_result" ).val(oParis.item.result) ;
                    
                    if(oParis.item.isTrending){
                        $('#trends-container').show();
                        $('#api_challenge_trendingTopics').val(oParis.item.trendingTopics);
                        $('#api_challenge_choice_hashtag_0').attr('checked', true);
                    }else{
                        $('#manual-container').show();
                        $('#api_challenge_hashtag_user').val(oParis.item.hashtagUser);
                        $('#api_challenge_choice_hashtag_1').attr('checked', true);
                    }
                    
                    var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                    var end = moment.utc($('#api_challenge_endDate').val(), 'DD/MM/YYYY HH:mm');
                    zdiff = moment.utc(end.diff(start)).format('HH:mm');
                    $('#api_challenge_duration').val(zdiff);
                }

                $( "#to_belong_to_user" ).autocomplete({
                    source: "{{ path('yon_user_autocomplete') }}",
                    minLength: 2,
                    select: function( event, ui ) {
                      setTimeout(log(ui), 100);
                    },
                    open: function() {
                        $('.ui-menu').width(350);
                    }
                });
                
                $( "#api_challenge_title" ).autocomplete({
                    source: "{{ path('yon_paris_autocomplete') }}",
                    minLength: 2,
                    select: function( event, ui ) {
                      setTimeout(presetParisList(ui), 100);
                    },
                    open: function() {
                        $('.ui-menu').width(350);
                    }
                });
                
                
                $("#api_challenge_startDate").on("dp.change", function(e) {
                    d = e.date.clone();
                    $('#api_challenge_endDate').val(d.add(defaultMaxHour, 'hours').format('DD/MM/YYYY HH:mm'));
                    if(!contestEndDate){
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(e.date.add(6, 'hours'));
                        return;
                    }
                    d1 = e.date.add(6, 'hours').clone();
                    
                    if(d1.diff(contestEndDate) < 0 ){
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(d1);
                    } else {
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                    }
                });
                $("#api_challenge_endDate").on("dp.change", function(e) {
                    
                    var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                    var end = e.date.utc();
                    zdiff = moment(end.diff(moment(start))).format('HH:mm');
                    $('#api_challenge_duration').val(zdiff);
                });
                    
                    {% if baseParis is defined %}
                        var jsparsed = JSON.stringify({{ baseParis|raw }});
                        presetParisList( { item: JSON.parse(jsparsed) });
                    {% endif %}
                        
                 
                
            });
            
	</script>
{% endblock %}



