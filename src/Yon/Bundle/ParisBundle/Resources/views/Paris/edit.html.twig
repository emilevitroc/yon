{% extends '::baseAdmin.html.twig' %}
{% form_theme edit_form ':Form:fields.html.twig' %}
{% block title %}{{ parent() }} Edition Paris {% endblock %}
{% set menuParis = true %}
{% set menuParisList = true %}
{% set SessionLastVisitPage = app.session.get('lastVisitePage') %}

{#{% block body %}
    <h1>ApiChallenge edit</h1>

    {{ form_start(edit_form) }}
        {{ form_widget(edit_form) }}
        <input type="submit" value="Edit" />
    {{ form_end(edit_form) }}

    <ul>
        <li>
            <a href="{{ path('apichallenge_index') }}">Back to the list</a>
        </li>
        <li>
            {{ form_start(delete_form) }}
                <input type="submit" value="Delete">
            {{ form_end(delete_form) }}
        </li>
    </ul>
{% endblock %}#}
{% block stylesheets %}
    {{ parent() }}
        <style>
            #api_challenge_choice_hashtag_1 {
                margin-left: 10px;
            }
            .toggleHashtag{
                display: none;
            }
        </style>
{% endblock %}
{% block body %}
    {% for flashMessage in app.session.flashbag.get('success') %}
        <div class="callout callout-success">
            {{ flashMessage }}
        </div>
    {% endfor %}
    {% for flashMessage in app.session.flashbag.get('error') %}
        <div class="callout callout-danger">
            {{ flashMessage }}
        </div>
    {% endfor %}
    <div class="row">
        <div class="col-md-12">
            <div class="box box-primary">
                <form role="form" class="form-edit-new form-horizontal" method="POST" action="">

                    <div class="box-header">
                        <h3 class="box-title">Edition Paris</h3>
                    </div>
                    {{ form_start(edit_form) }}
                    <div class="box-body">
                        <div class="form-group">
                            <label for="name" class="col-sm-2 control-label required">Auteur</label>
                            <div class="col-sm-5">
                                <input readonly="readonly" type="text" class="form-control"  name="to_belong_to_user" id="utilisateurs_to_belong_to_user" value="{% if apiChallenge.user is defined %}{{ apiChallenge.user.user.id }} {% endif %}">
                            </div>
                            <div class="col-sm-5">
                                <input type="text" class="form-control"  id="to_belong_to_user" value="" placeholder="Rechercher l'utilisateur ici">
                            </div>
                        </div>
{#                        {{ form_widget(edit_form) }}#}
                        {#{{ form_row(edit_form.title) }}#}
                        <div class="form-group">
                                <label class="col-sm-2 control-label required" for="api_challenge_title">Intitul√©</label>
                                <div class="col-sm-9">
                                    <input id="api_challenge_title" name="api_challenge[title]" required="required" maxlength="100" class="form-control ui-autocomplete-input" autocomplete="off" type="text" onKeyDown="textCounter(this,'titleCountDown',100);" onKeyUp="textCounter(this,'titleCountDown',100)" value="{{apiChallenge.title}}">                                   
                                </div>
                                <div class="col-sm-1">
                                    <input style="color:red;font-size:12pt;font-style:italic;" class="form-control" readonly="readonly" type="text" id='titleCountDown' name="titleCountDown" size="3" maxlength="3" /> 
                                </div>                               
                        </div>
                        {{ form_row(edit_form.duration) }}
                        {{ form_row(edit_form.startDate) }}
                        {{ form_row(edit_form.endDate) }}
                        {{ form_row(edit_form.choice_hashtag) }}
                        <div id="trends-container" class="toggleHashtag">
                            {{ form_row(edit_form.trendingTopics) }}
                        </div>
                        <div id="manual-container" class="toggleHashtag">
                            {{ form_row(edit_form.hashtag_user) }}
                        </div>
                        {{ form_row(edit_form.contest) }}
                        {{ form_row(edit_form.color) }}
                        {{ form_row(edit_form.result) }}
                        {{ form_row(edit_form.betPrice) }}
                        {{ form_row(edit_form.prize) }}
                        {{ form_row(edit_form.status) }}
                        {{ form_row(edit_form.alertMessage) }}                       
                        <input type = "hidden" value="{% if resultCouponChallenge.id is defined %}{{ resultCouponChallenge.id }}{% endif%}" name="couponId" id="couponId">
                        
                        <div class="form-group">
                                <label for="name" class="col-sm-2 control-label required">Coupons</label>
                                
                                <div class="col-sm-10" style="border: 2px solid #d2d6de;left: 18px;width: 81.2%;">

                                <div class="col-sm-8">
                                    <ul id="list-coupon">
                                        {#<li>aa</li>#}
                                    </ul>
                                </div>
                                <br/>
                                {#<span class="btn btn-default" id="add_coupon">+</span>#}
                                
                                <div class="form-group">                                                
                                        <div class="col-sm-1">
                                            <input id="add_coupon" type="checkbox" name="f_coupon[check]" style="width:20px;" value="1"  > &nbsp; Activer coupon
                                        </div>
                                </div>
                                
                                    
                                <div id="container-coupon-form" style="display:none;">
                                    <hr/>
                                    <div class="form-edit-new form-horizontal" id = "form_coupon">
       
                                        <div class="col-sm-8">
                                            <div class="form-group">
                                                <label for="type" class="col-sm-2 control-label ">Type</label>
                                                <div class="col-sm-8">
                                                    
                                                    <select name="f_coupon[type]" placeholder="type" class="form-control" id="type_coupon">
                                                        <option value= "">----- Choisir type coupon -----</option>
                                                        {% for keyCoupon,valCoupon in typeCoupon %}
                                                            <option {% if (resultCouponChallenge.type is defined and keyCoupon == resultCouponChallenge.type )%} selected="selected" {% endif %} value="{{ keyCoupon }}">{{ valCoupon }}</option>
                                                        {% endfor %}
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-8">
                                            <div class="form-group">
                                                <label for="amount" class="col-sm-2 control-label ">Montant</label>
                                                <div class="col-sm-8">
                                                    <input type="number" class="form-control"  name="f_coupon[amount]" id="amount_coupon" placeholder="amount" {% if resultCouponChallenge.amount is defined %}value="{{resultCouponChallenge.amount}}"{% endif %} >
                                                </div>

                                            </div>
                                        </div>
                                        <div class="col-sm-8">
                                            <div class="form-group">
                                                <label for="message" class="col-sm-2 control-label ">Message</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control"  name="f_coupon[message]" id="message_coupon" placeholder="message"  {% if resultCouponChallenge.popup.message is defined %}value="{{resultCouponChallenge.popup.message}}"{% endif %}>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-8">
                                            <div class="form-group">
                                                <label for="short_title" class="col-sm-2 control-label ">Description courte</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control"  name="f_coupon[short_title]" id="short_title_coupon" placeholder="Description courte" {% if resultCouponChallenge.popup.short_title is defined %}value="{{resultCouponChallenge.popup.short_title}}"{% endif %}>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-8">
                                            <div class="form-group">
                                                <label for="title" class="col-sm-2 control-label">Titre</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control"  name="f_coupon[title]" id="titre_coupon" placeholder="Titre coupon" {% if resultCouponChallenge.popup.title is defined %}value="{{resultCouponChallenge.popup.title}}"{% endif %} >
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div id="list-coupon-form-cloned">

                                </div>

                            </div>
                        </div>
                        
                    </div>
                    
                    
                    
                    <div class="box-footer">
                        <input type="submit" value="Enregistrer" class="btn btn-primary">
                        {#<a class="btn btn-default pull-left" href="{{ path('apichallenge_index') }}">Retour √† la liste</a>#}
                        <a class="btn btn-default pull-left" href="{% if SessionLastVisitPage[1] is defined %}{{ path(SessionLastVisitPage[0], { id: SessionLastVisitPage[1]} ) }}{% else %}{{ path('apichallenge_index') }}{% endif %}">Retour √† la liste</a>
                        <input type="button" value="Supprimer" class="btn btn-danger pull-right" onclick="confirmDelChallenge('{{ apiChallenge.id }}');">
                    </div>
                    {{ form_end(edit_form) }}
                </form>
            </div>
        </div>
    </div>
    
{% endblock %}

{% block javascripts %}
    {{ parent() }}
	<script type="text/javascript">
            var defaultMaxHour = {{ defaultMaxHour }};
            function textCounter(field, cnt, maxlimit) {         
                var cntfield = document.getElementById(cnt) 
                if (field.value.length > maxlimit) 
                    field.value = field.value.substring(0, maxlimit);
                else
                    cntfield.value = maxlimit - field.value.length;
            }
            $(function () {
                
                /* mettre la valeur du logueur du caract√®re dans le input #titleCountDown*/
                $lengthTitle = $("#api_challenge_title").val().length;
                $calculatedLength = (100 - $lengthTitle);
                $("#titleCountDown").val($calculatedLength);
                
                /* Tester si ce paris a un coupon*/
                {% if(resultCouponChallenge != "") %}
                    $('#add_coupon').attr('checked',true);
                {% else %}
                    $('#add_coupon').attr('checked',false);
                {% endif %}
                
                if($('#add_coupon').prop('checked')) {
                    $("#container-coupon-form").show();
                    $("#form_coupon select").prop('required',true);
                    $("#form_coupon input").prop('required',true);
                } else {
                    $("#container-coupon-form").hide();
                     $("#form_coupon select").prop('required',false);
                    $("#form_coupon input").prop('required',false);
                }
               
                $('#add_coupon').click(function(){
                    if($('#add_coupon').prop('checked')) {
                        $("#container-coupon-form").show();
                        $("#form_coupon select").prop('required',true);
                        $("#form_coupon input").prop('required',true);
                        $('#add_coupon').val('1');
                        $("#couponId").val("{% if resultCouponChallenge.id is defined %}{{ resultCouponChallenge.id }}{% endif%}");
                    } else {
                            $('#add_coupon').val('0');
                            bootbox.confirm({
                                title: "Cette action suppime ce coupon une fois que vous cliquez sur enregistrer",
                                message: "Voulez vous le desactiver",
                                buttons: {
                                    cancel: {
                                        label: '<i class="fa fa-times"></i> Non'
                                    },
                                    confirm: {
                                        label: '<i class="fa fa-check"></i> Oui'
                                    }
                                },
                                callback: function (result) {
                                    if(result){
                                        $("#container-coupon-form").hide();
                                        $("#form_coupon select").prop('required',false);
                                        $("#form_coupon input").prop('required',false);
                                        $("#couponId").val("{% if resultCouponChallenge.id is defined %}{{ resultCouponChallenge.id }}{% endif%}");
                                    }else{
                                        $('#add_coupon').trigger('click');
                                        
                                    }
                                }
                            }); 
                    }
                });
                
                /* https://eonasdan.github.io/bootstrap-datetimepicker/ */
                $('#api_challenge_startDate').datetimepicker({
                    format: 'DD/MM/YYYY HH:mm'
                });
                $('#api_challenge_endDate').datetimepicker({
                    format: 'DD/MM/YYYY HH:mm'
                });
                
                /* concours change*/
                var contestEndDate = null;
                var contestId   = $('#api_challenge_contest').val();
                var contestVal  = $("#api_challenge_contest option[value='"+contestId+"']").text();

                if(parseInt(contestId) > 0){
                    $('#manual-container').show();
                    $('#api_challenge_choice_hashtag_1').attr('checked', true);
                    $.ajax({
                        type: "GET",
                        url: '{{ path('apicontest_contest_info_ajax')}}',
                        cache: false,
                        data: {id: contestId},
                        success: function(response){
                            if(response.name){
                                $( "#utilisateurs_to_belong_to_user" ).val(response.userProfileId) ;
                                $( "#to_belong_to_user" ).val("").attr('readonly','readonly');

                                contestEndDate = moment(response.endDate, 'DD/MM/YYYY HH:mm');
                                contestStartDate = moment(response.startDate, 'DD/MM/YYYY HH:mm');

                                //console.log(response.endDate);
                                //console.log(response);
                                $('#api_challenge_startDate').data("DateTimePicker").minDate(response.startDate);
                                $('#api_challenge_startDate').data("DateTimePicker").maxDate(response.endDate);

                                /*
                                if(moment.utc(response.endDateProvisoir6, 'DD/MM/YYYY HH:mm') < moment.utc(contestEndDate, 'DD/MM/YYYY HH:mm')){
                                    $('#api_challenge_endDate').data("DateTimePicker").maxDate(response.endDateProvisoir6);
                                } else {
                                    $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                                }*/
                                //$('#api_challenge_endDate').data("DateTimePicker").minDate(response.startDate);
                                //$('#api_challenge_endDate').data("DateTimePicker").maxDate(response.endDate);


                                /*$( "#api_challenge_startDate" ).val(response.startDate) ;
                                $( "#api_challenge_endDate" ).val(response.endDate) ;*/
                                var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                                var end = moment.utc($('#api_challenge_endDate').val(), 'DD/MM/YYYY HH:mm');
                                zdiff = moment.utc(end.diff(start)).format('HH:mm');
                                $('#api_challenge_duration').val(zdiff);

                            }

                        }
                    });
                    $('#api_challenge_hashtag_user').val(contestVal.replace(/\s/g,"").replace("-","_")).attr('readonly','readonly');
                }
                
                $('#api_challenge_contest').change(function() {
                    var contestId = $(this).val();
                    var contestVal = $("#api_challenge_contest option[value='"+contestId+"']").text();
                    
                    if(parseInt(contestId) > 0){
                        $('#manual-container').show();
                        $('#api_challenge_choice_hashtag_1').attr('checked', true);
                        $.ajax({
                            type: "GET",
                            url: '{{ path('apicontest_contest_info_ajax')}}',
                            cache: false,
                            data: {id: contestId},
                            success: function(response){
                                if(response.name){
                                    
                                    $( "#utilisateurs_to_belong_to_user" ).val(response.userProfileId) ;
                                    $( "#to_belong_to_user" ).val("").attr('readonly','readonly');
                                    
                                    contestEndDate = moment(response.endDate, 'DD/MM/YYYY HH:mm');
                                    var contestStartDate = moment(response.startDate, 'DD/MM/YYYY HH:mm');
                                    var contestendDateProvisoir6 = moment(response.endDateProvisoir6, 'DD/MM/YYYY HH:mm');
                                   
                                    //reset minmaxDate
                                    var mLastMin =  $('#api_challenge_startDate').data("DateTimePicker").minDate();
                                    var mLastMax =  $('#api_challenge_startDate').data("DateTimePicker").maxDate();
                                    
                                    if(mLastMax.diff(moment(response.startDate, 'DD/MM/YYYY HH:mm')) > 0){
                                        $('#api_challenge_startDate').data("DateTimePicker").minDate(moment(response.startDate, 'DD/MM/YYYY HH:mm'));
                                        $('#api_challenge_startDate').data("DateTimePicker").maxDate(moment(response.endDate, 'DD/MM/YYYY HH:mm'));
                                        
                                        $('#api_challenge_endDate').data("DateTimePicker").minDate(moment(response.startDate, 'DD/MM/YYYY HH:mm'));
                                        var dCont = moment(response.startDate, 'DD/MM/YYYY HH:mm').add(6, 'hours').clone();
                                        if(dCont.diff(contestEndDate) < 0 ){
                                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(dCont);
                                        } else {
                                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                                        }
                        
                                    } else {
                                        $('#api_challenge_startDate').data("DateTimePicker").maxDate(moment(response.endDate, 'DD/MM/YYYY HH:mm'));
                                        $('#api_challenge_startDate').data("DateTimePicker").minDate(moment(response.startDate, 'DD/MM/YYYY HH:mm'));
                                        
                                        $('#api_challenge_endDate').data("DateTimePicker").minDate(moment(response.startDate, 'DD/MM/YYYY HH:mm'));
                                        var dCont = moment(response.startDate, 'DD/MM/YYYY HH:mm').add(6, 'hours').clone();
                                        if(dCont.diff(contestEndDate) < 0 ){
                                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(dCont);
                                        } else {
                                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                                        }
                                    }
                                    
                                    $( "#api_challenge_startDate" ).val(response.startDate) ;
                                    
                                    if( moment(response.endDate, 'DD/MM/YYYY HH:mm').diff(moment(response.endDateProvisoir, 'DD/MM/YYYY HH:mm')) < 0){
                                        $('#api_challenge_endDate').val(response.endDate);
                                    } else {
                                        $('#api_challenge_endDate').val(response.endDateProvisoir);
                                    }
                                    
                                    var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                                    var end = moment.utc($('#api_challenge_endDate').val(), 'DD/MM/YYYY HH:mm');
                                    zdiff = moment.utc(end.diff(start)).format('HH:mm');
                                    $('#api_challenge_duration').val(zdiff);
                                    
                                }
                                
                            }
                        });
                        $('#api_challenge_hashtag_user').val(contestVal.replace(/\s/g,"").replace("-","_")).attr('readonly','readonly');
                    } else {
                    
                        $('#api_challenge_hashtag_user').val("").removeAttr('readonly');
                        $( "#to_belong_to_user" ).val("").removeAttr('readonly');
                        $( "#utilisateurs_to_belong_to_user" ).val("");
                        contestEndDate = null;
                        var cust_now  = moment().format('DD/MM/YYYY HH:mm');
                        
                        var mLastMin =  $('#api_challenge_startDate').data("DateTimePicker").minDate();
                        var mLastMax =  $('#api_challenge_startDate').data("DateTimePicker").maxDate();
                                    
                        var stDateNow = moment(cust_now, 'DD/MM/YYYY HH:mm').clone();
                        var stDateNow2 = moment(cust_now, 'DD/MM/YYYY HH:mm').clone();
                        var stDateNow3 = moment(cust_now, 'DD/MM/YYYY HH:mm').clone();
                        
                        if(mLastMax.diff(moment()) > 0){
                            $('#api_challenge_startDate').data("DateTimePicker").minDate(moment(cust_now, 'DD/MM/YYYY HH:mm'));
                            $('#api_challenge_startDate').data("DateTimePicker").maxDate(stDateNow2.add('365', 'days'));

                            $('#api_challenge_endDate').data("DateTimePicker").minDate(moment(cust_now, 'DD/MM/YYYY HH:mm'));
                            var dCont2 = stDateNow2.add(6, 'hours').clone();
                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(dCont2);

                        } else {
                            
                            $('#api_challenge_startDate').data("DateTimePicker").maxDate(stDateNow2.add('365', 'days'));
                            $('#api_challenge_startDate').data("DateTimePicker").minDate(moment(cust_now, 'DD/MM/YYYY HH:mm'));

                            $('#api_challenge_endDate').data("DateTimePicker").minDate(moment(cust_now, 'DD/MM/YYYY HH:mm'));
                            var dCont2 = stDateNow2.add(6, 'hours').clone();
                            
                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(dCont2);
                        }
                        
                        $( "#api_challenge_startDate" ).val(moment(cust_now, 'DD/MM/YYYY HH:mm').format('DD/MM/YYYY HH:mm')) ;
                                    
                        $('#api_challenge_endDate').val(stDateNow3.add(3, 'hours').format('DD/MM/YYYY HH:mm'));
                        
                        {#$('#api_challenge_startDate').data("DateTimePicker").maxDate(moment().add('365', 'days'));
                        $('#api_challenge_startDate').data("DateTimePicker").minDate(moment());

                        $('#api_challenge_endDate').data("DateTimePicker").minDate(moment());
                        
                        var dCont = stDateNow.add(6, 'hours').clone();
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(dCont);
                        
                        $('#api_challenge_startDate').val(moment().format('DD/MM/YYYY HH:mm'));
                        $('#api_challenge_endDate').val( stDateNow2.add(defaultMaxHour, 'hours').format('DD/MM/YYYY HH:mm') );#}
                        setDuration();
                        
                    }
                });
                
                
                {% if isTrending %}
                    $('#trends-container').show();
                {% else %}
                    $('#manual-container').show();
                {% endif %}
                $('input[name="api_challenge[choice_hashtag]"]').change(function() {
                    $('.toggleHashtag').hide();
                    if (this.value == 'trends') {
                        $('#trends-container').show();
                    }
                    else if (this.value == 'manuel') {
                        $('#manual-container').show();
                    }
                });
                
                function log( message ) {
                    $( "#utilisateurs_to_belong_to_user" ).val(message.item.id) ;
                }
                
                $( "#to_belong_to_user" ).autocomplete({
                    source: "{{ path('yon_user_autocomplete') }}",
                    minLength: 2,
                    select: function( event, ui ) {
                      setTimeout(log(ui), 100);
                    },
                    open: function() {
                        $('.ui-menu').width(350);
                    }
                });
                
                /*
                $("#api_challenge_startDate").on("dp.change", function(e) {
                    
                    d = e.date.clone();
                    $('#api_challenge_endDate').val(d.add(defaultMaxHour, 'hours').format('DD/MM/YYYY HH:mm'));
                    if(!contestEndDate){
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(e.date.add(6, 'hours'));
                        return;
                    }
                    d1 = e.date.clone();
                    d2 = e.date.clone();
                    if(d1.add(6, 'hours') < contestEndDate){
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(d2.add(6, 'hours'));
                    } else {
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                    }
                });
                */
                $("#api_challenge_startDate").on("dp.change", function(e) {
                    
                    var d = e.date.clone();
                    var dh = e.date.clone();
                    var dOrig = e.date.clone();
                    $('#api_challenge_endDate').data("DateTimePicker").minDate(e.date);
                    
                    if(!contestEndDate){
                        $('#api_challenge_endDate').data("DateTimePicker").maxDate(dOrig.add(6, 'hours'));
                    } else {
                        var d1 = e.date.add(6, 'hours').clone();
                        if(d1.diff(contestEndDate) < 0 ){
                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(d1);
                        } else {
                            $('#api_challenge_endDate').data("DateTimePicker").maxDate(contestEndDate);
                        }
                    }
                    //set h+3
                    if(!contestEndDate){
                        $('#api_challenge_endDate').val(d.add(defaultMaxHour, 'hours').format('DD/MM/YYYY HH:mm'));
                    } else {
                        if( dh.add(defaultMaxHour,'hours').diff(contestEndDate) < 0){
                            $('#api_challenge_endDate').val(dh.format('DD/MM/YYYY HH:mm'));
                        } else {
                            $('#api_challenge_endDate').val(contestEndDate.format('DD/MM/YYYY HH:mm'));
                        }
                    }
                    setDuration();
                    
                });
                
                
                $("#api_challenge_endDate").on("dp.change", function(e) {
                    
                    var start = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                    var end = e.date.utc();
                    zdiff = moment(end.diff(moment(start))).format('HH:mm');
                    $('#api_challenge_duration').val(zdiff);
                });
                
            });
            
            function confirmDelChallenge(challengeId){
                bootbox.confirm({
                    title: "Voulez vous vraiment supprimer le paris?",
                    message: "Le paris sera supprimer definitivement dans la base",
                    buttons: {
                        cancel: {
                            label: '<i class="fa fa-times"></i> Non'
                        },
                        confirm: {
                            label: '<i class="fa fa-check"></i> Oui'
                        }
                    },
                    callback: function (result) {
                        if(result){
                            $.ajax({
                                type: "POST",
                                url: '{{ path('apichallenge_delete_ajax')}}',
                                cache: false,
                                data: {challengeId: challengeId},
                                success: function(response){
                                    if(response.code == 'success') {
                                        window.location.href = '{{ path('apichallenge_index') }}';
                                    } else {
                                      console.log(response.message);  
                                    }
                                }
                            });
                        }
                    }
                });
            }
            
            function setDuration(){
                var mStart = moment.utc($('#api_challenge_startDate').val(), 'DD/MM/YYYY HH:mm');
                var mEnd = moment.utc($('#api_challenge_endDate').val(), 'DD/MM/YYYY HH:mm');
                var mDiff = moment.utc(mEnd.diff(mStart)).format('HH:mm');
                $('#api_challenge_duration').val(mDiff);
            }
            
	</script>
{% endblock %}
